'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var clc = require('cli-color');

var defaults = {
  silly: 'blue',
  debug: 'cyan',
  info: 'green',
  warn: 'yellow',
  error: 'red',
  verbose: 'magenta'
};

var Colorizer = (function () {
  function Colorizer() {
    var colors = arguments.length <= 0 || arguments[0] === undefined ? defaults : arguments[0];

    _classCallCheck(this, Colorizer);

    this._colors = colors;
  }

  _createClass(Colorizer, [{
    key: 'colorByLevel',
    value: function colorByLevel() {
      var level = arguments.length <= 0 || arguments[0] === undefined ? 'info' : arguments[0];

      var white = 'white';
      var color = this._colors[level] || white;

      return typeof clc[color] != 'undefined' ? color : white;
    }
  }, {
    key: 'colorify',
    value: function colorify(string, color) {
      return clc[color](string);
    }
  }]);

  return Colorizer;
})();

module.exports = Colorizer;